generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                String   @id @default(uuid())
  first_name        String
  last_name         String
  auth_id           String   @unique
  email             String   @unique
  profile_image     String?
  created_at        DateTime @default(now())
  last_active       DateTime
  timezone          String @default("UTC")

  preferences       preference?
  tasks             task[]   @relation("UserTasks")
  daily_streaks     daily_streak[]
  room_members      room_member[]
}

model preference {
  user_id                  String   @id
  toggle_notes             Boolean  @default(true)
  toggle_pomodoro          Boolean  @default(true)
  toggle_pomodoro_overtime Boolean  @default(false)
  sound_volume             Int      @default(50)
  task_selection_mode      String   @default("sidebar")
  focus_check_time         Int      @default(15)
  local_time               String

  user                     user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model task {
  id             String   @id @default(uuid())
  user_id        String
  room_id        String
  task_name      String
  status         String   @default("not_started")
  duration       Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  completed_at   DateTime?
  timezone       String

  user           user     @relation("UserTasks", fields: [user_id], references: [id], onDelete: Cascade)
  room           room     @relation(fields: [room_id], references: [id])
  notes          note[]   @relation("TaskNotes")
}

model note {
  id                  String   @id @default(uuid())
  task_id             String
  type                String
  content_text        String
  checklist_completed Boolean  @default(false)
  position            Int

  task                task     @relation("TaskNotes", fields: [task_id], references: [id], onDelete: Cascade)
}

model daily_streak {
  id               String   @id @default(uuid())
  user_id          String
  completion_date  DateTime
  tasks_completed  Int
  total_seconds    Int

  user             user     @relation(fields: [user_id], references: [id])
}

model admin_setting {
  room_id                  String   @id
  toggle_leaderboard       Boolean  @default(true)
  toggle_streaks           Boolean  @default(true)
  toggle_tooltip_stats     Boolean  @default(true)
  authentication_required  Boolean  @default(false)
  sprint_duration          String   @default("1_week")
  room_timezone            String

  room                     room     @relation(fields: [room_id], references: [id])
}

model room {
  id               String           @id @default(uuid())
  name             String
  slug             String           @unique
  picture          String
  created_at       DateTime         @default(now())
  owner            String

  room_members      room_member[]
  admin_setting     admin_setting?
  tasks             task[]
}

model room_member {
  id        String   @id @default(uuid())
  room_id   String
  user_id   String
  role      String   @default("member")
  joined    DateTime @default(now())

  room      room     @relation(fields: [room_id], references: [id])
  user      user     @relation(fields: [user_id], references: [id])
}